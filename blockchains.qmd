# Blockchains
We would prefer to use the term Decentralized Incentive Network instead of blockchain. But we also want to align on common nomenclature within the industry, so we'll stick with Blockchain for now.

The point of blockchains:

* Censorship resistance
* Deterministic State Transition (Mempool creates interesting nuances and complexity here)
* Credible neutrality
* Trustless coordination at scale
* Asset digitization and ownership

Censorship resistance is indeed crucial - it enables truly permissionless systems where no entity can prevent valid transactions. However, there are several other compelling candidates for blockchain's primary purpose:
One strong contender is deterministic state transition. Think about how traditional databases or financial systems might have ambiguity about the exact sequence or timing of transactions, especially across different locations or institutions. Blockchain provides absolute clarity about state changes - there's no ambiguity about which transaction came first or what the exact state was at any given moment. This property enables complex financial systems and smart contracts to operate with complete predictability.
Another fundamental purpose could be creating credible neutrality in computational systems. This goes beyond just censorship resistance - it's about creating systems where the rules are explicit, unchangeable without consensus, and apply equally to all participants. Traditional systems often have hidden biases or special privileges for certain users, while blockchain systems enforce their rules uniformly through code.
We could also argue that the primary purpose is enabling trustless coordination at scale. Before blockchain, coordinating economic activity among untrusting parties required trusted intermediaries like banks or governments. Blockchain enables direct peer-to-peer coordination without these intermediaries, potentially reducing costs and increasing efficiency.
Asset digitization and ownership might be another contender. Blockchain enables digital scarcity and verifiable ownership in ways that weren't possible before. This property enables everything from cryptocurrencies to NFTs to tokenized real-world assets.

We won't be taking any idealogical approach to the point of blockchains but rather applying scores to DIN's and then comparing that to how the market values them.

A decentralized incentive network with state consensus 

I've tried to simplify our definition as much as possible and even still it's verbose. Read that sentence to 99% of the world and I'll they'll give you a quizzical look and move onto the section about meme coins. There's a lesson there. A lesson the technical luminaries in this space ignore at their peril. Accessibility matters. 

Let's break down each component of our definition.

Decentralized. 
This is how many Nodes participate. Centralized means 1. Therefore anything more than 1 is decentralized. 

Network. 
This loosely means the participants computers/machines communicate via a communication method. 

State Consensus.
The network will record state and all nodes will agree about the state via consensus.

We don't need to worry too much about consensus yet, but you just need to know that the nodes must agree on the state. For example if Bob sends Alice 10 BTC. Everyone on the network must come to an agreement that Bob did indeed send Alice 10 BTC. Another important characteristic is that even if everyone agrees today, in the future that can't be disputed or changed. This is another important category called censorship resistance. We'll get to it. 

Dependent Networks

A sovereign chain can be defined as a network that maintains complete independence in its settlement process, requiring no external chain to validate or guarantee its state transitions. This independence is fundamental to the concept of sovereignty in blockchain networks. 

This section should start discussing why the need arose for dependent networks. Specifically Ethereum struggling with scale. Due to the trilemna:
decentralization
security
scalability

Let's talk about scaling strategies
monolithic
Bigger blocks
Faster blocks
Higher minimum requirements for nodes
Consensus optimizations
modular
Execution - The current crop of L2's
Data availability - Storing and accessing blockchain data Celestia
Consensus - Agreeing on the state of the network 
Settlement - Finalizing transactions and providing security guarantees. Ethereum and Bitcoin in the current Layer craze

## Sovereign Networks
Pure Value Networks
Pure value networks stick to the fundamental purpose of moving and storing value, avoiding the additional complexity that comes with being a platform for applications or other services.

What makes these networks "pure value" is what they don't include:
They don't support complex smart contracts
They don't host decentralized applications
They don't provide programmable functionality beyond basic value transfer
They don't serve as platforms for other tokens or applications

Application Chains
Application Chains represent networks that go beyond pure value transfer to support various types of applications. They're divided into three main categories: Hubs, Specialized, and Generalized chains.

Hub Application Chains serve as central connection points in the blockchain ecosystem. 

Specialized Application Chains focus on specific use cases or industries. 

Generalized Application Chains aim to support a wide range of applications but differ from hubs in that they're not necessarily trying to be central connection points. 

The key distinction between these categories lies in their approach to applications:
- Hubs prioritize becoming central platforms that other networks depend on
- Specialized chains optimize everything for specific use cases
- Generalized chains provide broad functionality but focus on being self-contained ecosystems




## Layer 2's
We break these down into:

* Rollups
    * Optimistic
    * ZK 
* Validiums
* Plasma
* Sidechains

So Ethereum has chosen decentralization and security. This means Ethereum is shit at scaling. 

So we need to talk about the theory of Layers in Blockchain

That's why L2's became a major part of the roadmap. How does the scalability limitation affect the network. Congestion and high gas fee's. So people don't interact on the chain and it hits a ceiling. So logically we should start any discussion with transaction fee's, as that's the direct result of the scalability failure and the main reason users use L2's. Besides yield opportunities.

So we should first consider the Fee Markets on Ethereum and Bitcoin which are the two major chains looking to scale with L2's. 
There is a lot of debate and a lot of misinformation around this topic. 

Dependent networks can really be divided into chains:
External DIN required to validate state transitions
External DIN required to guarantee state transitions

We'll define a framework for how we define a Dependent Network. 
There are few things we look at, in terms of priority:
censorship resistance. Polygon zkEVM sequencer can censure, but you can go through the contract directly on Ethereum theoretically if censorship occurs. Same thing for Arbitrum. Although this is a very weak guarantee due to the complexity for regular users. For Stacks, it's more censorship resistant that the other two. Also if I were to interact directly with the smart contract on Ethereum, that makes the L2's pointless. Why do I need them if not to deal with congestion and high gas. 
dispute resolution. I believe all chains need to hard fork. Potentially not Movement due to Move's resource model. None of the chains will automatically hard fork if a dispute is found. 
settlement. So the base chain must validate and guarantee state transitions on the dependent chain. This is kinda stupid. It's guaranteeing the state transitions but makes no attempt to resolve things like censorship resistance. 
finality of settlement. Optimistic 7 days, zk 30 minutes, Stacks 16 hours
economic security model inheritance - this is actually pointless as it just means the state transitions match the rules. Nothing about censorship resistance. 

So my qualification of dependent networks means that they must inherit the censorship resistance of the base chain, settlement must be validated and guaranteed by the base chain, dispute resolution must be automatic and/or decentralized. else the chain can just fork. 

Settlement Types
In order of strength
Cryptographically enforced settlement
Validity proofs
Fraud proof systems
Checkpoint systems
 
Core Infrastructure Components 
Network Security
Attack Vectors
Network Level: Eclipse attacks, BGP hijacking, DDoS attacks Protocol Level: Double spending, nothing-at-stake, long-range attacks Application Level: Smart contract vulnerabilities, oracle manipulation
Defense Mechanisms
Network Diversity: Geographic distribution, client diversity, network topology Economic Security: Slashing conditions, required stake amounts, timelock mechanisms Operational Security: Key management, upgrade processes, emergency responses
Monitoring and Detection
Network Health Monitoring: Peer count, block propagation, chain quality Threat Detection: Fork monitoring, unusual transaction patterns, validator behavior Incident Response: Alert systems, mitigation procedures, recovery processes
Network Governance
Governance Models
On-Chain: Direct token voting, delegated voting, quadratic voting Off-Chain: Foundation-led, core team decisions, community forums Hybrid: Combined on-chain execution with off-chain discussion
Decision Domains
Protocol Parameters: Block size, gas limits, fee structures Treasury Management: Fund allocation, grant distribution, development funding Protocol Upgrades: Hard forks, soft forks, emergency changes
Participation Mechanisms
Proposal Systems: Submission requirements, discussion periods, voting periods Voting Methods: Token-weighted, identity-based, reputation-based Execution Methods: Automatic execution, timelock delays, manual implementation
Cross-Chain Communication
Bridge Types
Trusted Bridges: Custodial, multi-signature, federated Trustless Bridges: Light clients, zero-knowledge proofs, relay networks Hybrid Bridges: Combined trusted and trustless elements
Message Passing
Protocol Standards: IBC (Inter-Blockchain Communication), cross-chain messaging Verification Methods: SPV proofs, merkle proofs, validity proofs Asset Standards: Wrapped tokens, synthetic assets, native bridges
Security Considerations
Bridge Security: Validator sets, challenge periods, fraud proofs Asset Security: Lockup mechanisms, minting controls, burning procedures Network Security: Cross-chain replay protection, nonce management

Network Performance Metrics
Transaction Performance
Throughput: Transactions per second (TPS), block size limits Latency: Block time, time to finality, confirmation time Costs: Transaction fees, gas costs, execution costs
Network Performance
Block Propagation: Time to reach network percentage Network Load: Memory pool size, peer connections, bandwidth usage Chain Quality: Uncle rate, chain reorganizations, block validity
Resource Utilization
Computing Resources: CPU usage, memory requirements, storage growth Network Resources: Bandwidth consumption, peer connections Storage Resources: State size, history size, pruning capabilities
Node Architecture
Node Types
Full Nodes: Complete state and history validation Light Nodes: Header-only validation, SPV proofs Archive Nodes: Complete historical state storage Validator Nodes: Block production and validation
Network Topology
Peer Discovery: Bootstrap nodes, DHT, static peers Connection Management: Maximum peers, scoring systems, ban lists Data Propagation: Block propagation, transaction propagation
Resource Management
State Management: State storage, pruning policies, snapshot systems Network Management: Bandwidth limits, peer limits, prioritization Computing Management: Transaction pools, execution priorities
Developer Infrastructure
Development Tools
SDKs: Language support, library ecosystems, tool chains Testing Tools: Local networks, test frameworks, simulation tools Monitoring Tools: Block explorers, metrics, logging systems
API Infrastructure
RPC Endpoints: JSON-RPC, GraphQL, WebSocket Node APIs: Client APIs, wallet interfaces, indexer APIs Data Access: Block data, state data, historical data
Development Environment
Local Development: Development networks, docker environments Testing Networks: Test networks, faucets, explorers Production Deployment: Network access, monitoring, maintenance

Common Concepts

State Growth & Pruning Mechanisms Across Networks
Ethereum
State Growth
Unlimited state growth
Historical state maintained by full nodes
State size ~130GB and growing
Uses Merkle Patricia Trie for state storage
Pruning Mechanisms
Archive nodes store full history
Full nodes can prune historical states
Light clients only store block headers
No protocol-level state expiry yet (proposed)
Solana
State Growth
Accounts model with rent mechanism
State stored in memory for fast access
Accounts can be marked rent-exempt
Program data separated from account data
Pruning Mechanisms
Rent mechanism removes inactive accounts
Two years of inactivity leads to account cleanup
Validators can prune historical data
Replicators store historical data
Sui
State Growth
Object-centric storage model
Objects can be deleted explicitly
Storage fund for long-term costs
Parallel execution reduces state bloat
Pruning Mechanisms
Objects can be explicitly deleted
Storage rebates incentivize cleanup
Validators can prune transaction history
Maintains live object set separately
Aptos
State Growth
Account-based model
Resources stored under accounts
Explicit resource deletion
Storage fees for state growth
Pruning Mechanisms
Storage fees incentivize cleanup
Explicit resource deletion
Validators can prune historical states
Maintains current state tree
XRP
State Growth
Account-based ledger
Reserve requirements limit state growth
Objects can be deleted
Amendable reserve requirements
Pruning Mechanisms
Online deletion for historical data
Reserve requirements prevent spam
Ledger header retention policy
Configurable history retention
Stellar
State Growth
Account-based ledger
Minimum balance requirements
Entry lifetime policies
Base reserve adjustable by voting
Pruning Mechanisms
Built-in entry expiration
Configurable history retention
Minimum balance requirements
Explicit deletion of unused entries
Polkadot
State Growth
Trie-based state storage
Storage rent (proposed)
Bounded parachain growth
Shared state across parachains
Pruning Mechanisms
State rent mechanism (planned)
Historical pruning options
Parachain state management
Archive nodes for full history
Layer 2 Solutions
Optimistic Rollups (Optimism, Arbitrum)
State growth tied to L1 data availability
Compression techniques for state updates
Fraud proof window affects state retention
Can prune after challenge period
ZK Rollups (zkSync, StarkNet)
State updates verified by ZK proofs
More efficient state representation
Immediate finality enables pruning
State diffs published to L1
Key Patterns
Growth Control MechanismsStorage fees/rent
Minimum balances
Reserve requirements
Explicit deletion
Pruning StrategiesHistorical pruning
State expiry
Account cleanup
Resource deletion
Storage IncentivesRent mechanisms
Storage rebates
Deletion incentives
Reserve requirements

## Consensus Mechanisms
Consensus Mechanisms
All DIN's have a consensus mechanism
we have the consensus mechanisms. These can be divided into the following broad categories:
Proof based mechanisms. Mainly Proof of Work and Proof of Stake
Byzantine Fault Tolerance (BFT) Mechanisms. Tendermint
Voting Based Mechanisms, Ripple and Stellar
Directed Acrylic Graph based mechanisms
Hybrid. PoS + BFT is used by Polkadot and Cosmos
Novel Mechanisms

Need to talk about finality here about probabilistic vs deterministic. Also focus on Single Slot Finality
Proof-Based Mechanisms
Proof of Work (PoW)
Security Model: Computational work as economic security
Key Properties: 
Energy-intensive computational puzzles
Natural chain selection through longest chain rule
Strong resistance to Sybil attacks
High latency to finality
Finality: Probabilistic finality with increasing certainty over time
Attack Resistance: 
51% attack requires majority of network hashpower
Very high cost of attack for established networks
Examples: Bitcoin, Ethereum (pre-merge), Litecoin
Proof of Stake (PoS)
Security Model: Economic stake as security
Key Properties: 
Energy efficient
Validator selection based on stake
Slashing conditions for misbehavior
Lower latency than PoW
Finality: Can achieve deterministic finality with additional mechanisms
Attack Resistance: 
33% or 51% stake required depending on implementation
Economic penalties for malicious behavior
Examples: Ethereum 2.0, Cardano, Tezos
Byzantine Fault Tolerance (BFT) Mechanisms
Classical BFT
Security Model: Agreement among known validator set
Key Properties: 
High throughput
Low latency
Immediate finality
Limited validator set size
Finality: Instant finality once consensus reached
Attack Resistance: 
Tolerates up to 1/3 Byzantine validators
Requires 2/3+ honest validators
Examples: Tendermint (Cosmos), Hyperledger Fabric
Practical BFT (PBFT)
Key Properties: 
Three-phase commit protocol
View change protocol for leader failures
Optimized for practical systems
Performance Characteristics: 
Higher message complexity
Better performance in stable conditions
Examples: NEO, Hyperledger Sawtooth
Voting-Based Mechanisms
Federated Byzantine Agreement (FBA)
Security Model: Trust between validator groups
Key Properties: 
Quorum slices
Flexible trust model
Open validator set
Finality: Quick finality within trust boundaries
Attack Resistance: 
Based on trust overlap between validator groups
Resistant to split votes through quorum intersection
Examples: Stellar, Ripple
Delegated Proof of Stake (DPoS)
Security Model: Elected validator set
Key Properties: 
Token holder voting
Limited validator set
Regular validator rotation
Finality: Quick finality with selected validators
Attack Resistance: 
Governance attacks through voter collusion
Validator collusion risks
Examples: EOS, TRON
Directed Acyclic Graph (DAG) Based
Pure DAG
Security Model: Transaction confirmation through subsequent references
Key Properties: 
Parallel transaction processing
No explicit blocks
Scalable throughput
Finality: Probabilistic with increasing certainty
Attack Resistance: 
Spam resistance through PoW
Double-spend prevention through transaction ordering
Examples: IOTA, Hedera Hashgraph
Block-DAG
Security Model: Hybrid of blockchain and DAG properties
Key Properties: 
Multiple concurrent blocks
Complex ordering rules
Higher throughput than linear chains
Examples: PHANTOM, SPECTRE
Hybrid Mechanisms
PoS + BFT
Security Model: Economic stake with BFT finality
Key Properties: 
Stake-based validator selection
BFT consensus for finality
Slashing for misbehavior
Finality: Deterministic through BFT layer
Attack Resistance: 
Economic security from stake
Byzantine resistance from BFT
Examples: Polkadot, Cosmos
PoW + BFT
Security Model: Dual layer security
Key Properties: 
PoW for block production
BFT for finality
Higher security guarantees
Examples: Decred
Novel Mechanisms
Proof of History (PoH)
Security Model: Verifiable delay function for time ordering
Key Properties: 
Built-in timestamping
Efficient verification
High throughput
Finality: Quick finality with PoS integration
Examples: Solana
Avalanche
Security Model: Metastable consensus through repeated sampling
Key Properties: 
Sub-second finality
High throughput
Scalable validator set
Finality: Probabilistic with quick practical finality
Examples: Avalanche
Key Considerations for Consensus Selection
Performance Metrics
Transaction throughput
Time to finality
Network overhead
Hardware requirements
Security Properties
Byzantine fault tolerance
Sybil resistance
Double-spend prevention
Network partition handling
Decentralization Factors
Validator set size
Entry barriers
Geographic distribution
Economic concentration
Network Requirements
Synchronicity assumptions
Bandwidth needs
Storage requirements
CPU/GPU demands
Economic Considerations
Operating costs
Required stake/investment
Reward distribution
Slashing conditions

## Application Models
Add a section here on precompiled contracts
All DIN's will have an application model. 
So the Application model looks at the following:
state management
parallelization Potential
Asset Representation
Composability
Safety Guarantees

UTXO also includes Cardano's extened UTXO, Kaspa also falls into this
Account 
Pure EVM, TRON
Specialized XRP and Stelalr falls under this with their balance-based model, 
Sharded account model Near falls into this. 
Object (Sui)
Aptos Resource model while different is moving towards an Object model for Coins/Tokens
Capability (Solana)
Cell model (TON)
Actor Based (ICP and CosmWasm

## Communication Protocols
We have

* IBC (Inter-Blockchain Communication) - Cosmos
* XCMP (Cross-Chain Message Passing) - Polkadot
* CCTP (Cross-Chain Transfer Protocol) by Circl
* CCIP (Cross-Chain Interoperability) by Chainlink
* Warp Messaging for Avalanche
* IMP (Interchain Messaging Protocol)

We can then further classify these standard by the following properties:
* Security Model
* Centralized vs Decentralized
* Message Scope (General (IBC,CCIP, Hyperlane) vs Specialized (Circle's CCTP and Warp))
* Open vs Close networks 
* Message Verification Method


## Fee Markets
We break down fee markets into:

* Block Space Markets
* Resources Markets

### Block Space Markets
These are the most fundamental type. Users are paying for space in the next block, regardless of what they're doing with that space. It only considers the price of inclusion while respecting the limits of the network.

### Resource Markets
These evolved with the advent of Ethereum as blockchains became more complex. We break these down into:

* Compute
* Data Availability
* Storage
* Hybrid

#### Compute Markets
Transaction fee's sometimes called Gas is what you pay to execute a smart contract on a blockchain. On some networks, like Ethereum, there is an execution limit on how much computational work can be done in a block. This parameter directly impacts the computational resources required to run a node. 

Nodes can propose a gas limit

So the attributes for Transactions Fee's are:
Tips/Bribes
How Transactoin fees are distributed. Burnt or redirected to Miners
How fee's are calculated
Base Fee
Dynamic Fee (based on something like network congestion)

### Data Availability
We will compare the mechanisms of the following major DA layers:

* Ethereum
* Celestia
* Eignlayer DA
* Avail

Ethereum uses dynamic blob fees based upon a target amount of blob space per block. 

Celestia charges by size. Celestia is designed to scale to handle increase demand with adding more validators

Avail also charges by size but also the type. 

EigenDA creates a marketplace for data availability providers

#### Storage

#### Hybrid

#### Congestion Measurement Mechanisms
**Ethereum**

* Measures block gas utilization vs 15M target
* 12.5% base fee adjustment per block
* Block size can flex up to 30M gas

**Stellar**

* Uses surge pricing mechanism
* Triggers when ledger capacity exceeds 50%
* Fee increases proportionally to network load

**Polkadot**

* Uses weight-based system
* Measures block weight against target
* Adjusts fees based on block fullness

**Tezos**

* Monitors block saturation
* Adjusts fees based on recent block usage
* Uses gas limits per operation type

### Data Availability market
Ethereum uses blobs, which are special containers for Layer 2 rollups to post their transaction data. They also disappear after a time. 

Blob fee is calculated based on the target blob gas per block.

## Network Change Management

### Overview
Network change management in DINs encompasses the processes, mechanisms, and stakeholders involved in proposing, discussing, approving, and implementing network modifications. This framework covers everything from minor parameter adjustments to major protocol upgrades.

**TODO** Design something that can simulate 

## Clients

## Bridges
Classification of Bridges. Need to include Lazy Bridges here
https://blog.celestia.org/lazybridging/ 

* Trusted
  * Custodial
  * Multi Signature
  * Federated
* Trustless Bridges
  * Light Client
  * ZK
    * Lazy Bridge
  * Relay 